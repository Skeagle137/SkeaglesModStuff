buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "0.5-dev"
group = "net.skeagle.skeaglesmodstuff"
archivesBaseName = "smodstuff"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.0.12'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

minecraft {
    mappings channel: 'parchment', version: '1.18.1-2022.03.06-1.18.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run/client')
            arg "-mixin.config=smodstuff.mixins.json"
            property 'forge.logging.console.level', 'debug'
            mods {
                smodstuff {
                    source sourceSets.main
                }
            }
        }

        server {
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run/server')
            args '-nogui', "-mixin.config=smodstuff.mixins.json"
            property 'forge.logging.console.level', 'debug'
            mods {
                smodstuff {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'smodstuff', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                smodstuff {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

mixin {
    add sourceSets.main, "smodstuff.refmap.json"
}

jar {
    manifest {
        attributes([
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": archivesBaseName,
            "Specification-Version": project.version,
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": archivesBaseName,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConnector": "net.skeagle.skeaglesmodstuff.MixinConnector"
        ])
    }
}

processResources {
    exclude ".cache"
    duplicatesStrategy = duplicatesStrategy.INCLUDE

    inputs.property 'version', project.version
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}